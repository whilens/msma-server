const { FightContract, ChatRoom, ChatRoomParticipant, Users, GoFight, Fight, Fighters, Events, Promoters, FightOffer } = require('../../models');
const { getWebSocketInstance } = require('../../websocket-instance');

class SignCallback {
    constructor() {
        this.webSocketServer = null;
    }

    setWebSocketServer(wss) {
        this.webSocketServer = wss;
    }

    async signCallback(req, res) {
        try {
            console.log('üìù –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–ª–±—ç–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', req.body);
            
            const callbackData = req.body;
            const { _id, status, entities, system_entities, verifications, message } = callbackData;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω
            if (!status || status.internal_id !== 2 || status.name !== '–ü–æ–¥–ø–∏—Å–∞–Ω') {
                console.log('‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, —Å—Ç–∞—Ç—É—Å:', status);
                return res.json({ 
                    success: false, 
                    message: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω' 
                });
            }

            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ okidoki_contract_id
            const contract = await FightContract.findOne({
                where: { okidoki_contract_id: _id },
                include: [
                    {
                        model: Fight,
                        as: 'Fight',
                        include: [
                            {
                                model: GoFight,
                                as: 'Responses',
                                include: [
                                    {
                                        model: ChatRoom,
                                        as: 'ChatRoom',
                                        include: [
                                            {
                                                model: ChatRoomParticipant,
                                                as: 'Participants',
                                                include: [
                                                    {
                                                        model: Users,
                                                        as: 'User'
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            });

            if (!contract) {
                console.log('‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î —Å okidoki_contract_id:', _id);
                return res.json({ 
                    success: false, 
                    message: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                });
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç:', contract.id);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            await contract.update({
                status: 'signed',
                signed_at: new Date(),
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ OkiDoki
                contract_details: JSON.stringify({
                    okidoki_data: callbackData,
                    entities: entities || [],
                    system_entities: system_entities || [],
                    verifications: verifications || {}
                })
            });

            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "signed"');

            // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö GoFight
            const chatRoom = contract.Fight?.Responses?.[0]?.ChatRoom;
            
            if (!chatRoom) {
                console.log('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
                return res.json({ 
                    success: false, 
                    message: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                });
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            const fullChatRoom = await ChatRoom.findByPk(chatRoom.id, {
                include: [
                    {
                        model: ChatRoomParticipant,
                        as: 'Participants',
                        include: [
                            {
                                model: Users,
                                as: 'User'
                            }
                        ]
                    },
                    {
                        model: GoFight,
                        as: 'GoFight',
                        include: [
                            {
                                model: Fight,
                                as: 'Fight',
                                include: [
                                    {
                                        model: Events,
                                        as: 'Event',
                                        include: [
                                            {
                                                model: Promoters,
                                                as: 'Promoter',
                                                include: [
                                                    { model: Users, as: 'User' }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                model: Fighters,
                                as: 'Fighter',
                                include: [
                                    { model: Users, as: 'User' }
                                ]
                            }
                        ]
                    }
                ]
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–∞ (WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
            if (fullChatRoom) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
                const notificationData = {
                    type: 'contract_signed',
                    message: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω! üéâ',
                    contractId: contract.id,
                    signedAt: new Date().toISOString(),
                    details: {
                        contractNumber: system_entities?.find(e => e.keyword === '–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')?.value || 'N/A',
                        signer: '–ü–æ–¥–ø–∏—Å–∞–Ω—Ç',
                        status: 'signed'
                    }
                };

                console.log('üì¢ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –¥–ª—è —á–∞—Ç–∞:', fullChatRoom.id);
                console.log('üìä –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationData);

                // TODO: –î–æ–±–∞–≤–∏—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                // webSocketServer.broadcastToRoom(`room_${fullChatRoom.id}`, null, notificationData);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (contract.offer_id) {
                const offer = await FightOffer.findByPk(contract.offer_id);
                if (offer) {
                    await offer.update({
                        status: 'contract_signed'
                    });
                    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "contract_signed"');
                }
            }

            console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

            res.json({ 
                success: true, 
                message: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                contractId: contract.id,
                status: 'signed'
            });

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –≤ signCallback:', error);
            res.status(500).json({ 
                success: false, 
                message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–±–µ–∫–∞',
                error: error.message 
            });
        }
    }
}

module.exports = new SignCallback();